// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: xm.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Xm.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - UCSEXMXmRoot

@implementation UCSEXMXmRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - UCSEXMXmRoot_FileDescriptor

static GPBFileDescriptor *UCSEXMXmRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"UCSEXM"
                                                 objcPrefix:@"UCSEXM"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - UCSEXMrequest

@implementation UCSEXMrequest

@dynamic requestid;
@dynamic index;
@dynamic URL;

typedef struct UCSEXMrequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t index;
  NSString *requestid;
  NSString *URL;
} UCSEXMrequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "requestid",
        .dataTypeSpecific.className = NULL,
        .number = UCSEXMrequest_FieldNumber_Requestid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UCSEXMrequest__storage_, requestid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "index",
        .dataTypeSpecific.className = NULL,
        .number = UCSEXMrequest_FieldNumber_Index,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UCSEXMrequest__storage_, index),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = UCSEXMrequest_FieldNumber_URL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UCSEXMrequest__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UCSEXMrequest class]
                                     rootClass:[UCSEXMXmRoot class]
                                          file:UCSEXMXmRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UCSEXMrequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003!!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UCSEXMxesponse

@implementation UCSEXMxesponse

@dynamic errorMsg;
@dynamic errorCode;
@dynamic listArray, listArray_Count;

typedef struct UCSEXMxesponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *errorMsg;
  NSMutableArray *listArray;
  int64_t errorCode;
} UCSEXMxesponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "errorMsg",
        .dataTypeSpecific.className = NULL,
        .number = UCSEXMxesponse_FieldNumber_ErrorMsg,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UCSEXMxesponse__storage_, errorMsg),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "errorCode",
        .dataTypeSpecific.className = NULL,
        .number = UCSEXMxesponse_FieldNumber_ErrorCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UCSEXMxesponse__storage_, errorCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "listArray",
        .dataTypeSpecific.className = NULL,
        .number = UCSEXMxesponse_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(UCSEXMxesponse__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UCSEXMxesponse class]
                                     rootClass:[UCSEXMXmRoot class]
                                          file:UCSEXMXmRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UCSEXMxesponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\010\000\002\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
